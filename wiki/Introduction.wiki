#summary Introduction

= Introduction =

The android-cpp-sdk is a c++ wrapper for android's java sdk.

The purpose of android-cpp-sdk is to ease native/NDK development on android platform, by providing a coresponding c++ class for almost every java class from android-sdk.


= Design =

android-cpp-sdk is designed as header-only library and consists of folowing 2 parts:

 * j2cpp: support library that eases using of JNI;
 * android platform header files: automatically generated files from corresponding android sdk .jar file;


Each adnroid sdk class and its nested classes are implemented in one header file and is automatically generated by java2cpp tool.

The header file contains declaration and definition of classes. Whether declaration or definition is needed can be selected by defining a folowing preprocessor macro:

{{{
#define J2CPP_INCLUDE_IMPLEMENTATION
}}}

before including the file.

= Usage =

As it is said, the library is header only so the usage is simple as including the header files for used classes.

The project must have defined include paths to following directories:
{{{
$(PATH_TO_ANDROID_CPP_SDK)/j2cpp
}}}

and depending on android platform the application is written for :
{{{
$(PATH_TO_ANDROID_CPP_SDK)/platforms/android-(platform id)
}}}


Before using the android-cpp-sdk, first it must be initialized. 

== Initialization ==

The library is initialized by providing it a JavaVM instance with calling:

{{{
j2cpp::environment::get().init(jvm);
}}}
.

The best practice to do this is when the native library (.so) is loaded, for example:

{{{
#include <j2cpp/j2cpp.hpp>

JNIEXPORT jint JNI_OnLoad(JavaVM* vm, void* reserved)
{
	if(!j2cpp::environment::get().init(vm))
		return JNI_ERR;
	return JNI_VERSION_1_6;
}

}}}

== Importing classes ==

Importing/using of android-sdk classes can be done as follows:

{{{
#include <j2cpp/j2cpp.hpp>
#include <android/hardware/Camera.hpp>
#define J2CPP_INCLUDE_IMPLEMENTATION
#include <android/hardware/Camera.hpp>
}}}

Be aware of including a definition of same class in multiple .cpp files, linker will error with multiple symbol definition.

The best way is to have one .cpp file which will include definition of all used classes:

my_project/jni/android_cpp_sdk_lib.cpp :

{{{
#include <j2cpp/j2cpp.hpp>
#include <android/app/Activity.hpp>
#include <android/hardware/Camera.hpp>
.
.
.
#define J2CPP_INCLUDE_IMPLEMENTATION
#include <android/app/Activity.hpp>
#include <android/hardware/Camera.hpp>
.
.
.
}}}

== References ==

For referencing java objects j2cpp library provides two reference classes:

 * local_ref< ClassType > : used for holding a local/stack reference to java object;
 * global_ref< ClassType > : used for holding a global reference to java object;


== Wrapping and using an existing instance of java class (jobject) ==

Each automatically generated class has an explicit constructor that accepts jobject.

For simply using an existing instance of known java class, it is simple as :

{{{
using namespace j2cpp;

void processModionEvent(jobject me)
{
    android::view::MotionEvent motionEvent(me);
    jfloat meX=motionEvent.getX();
    jfloat meY=motionEvent.getY();
    .
    .
    .
}

}}}

== Creating an objects ==

Creating new objects is done by invoking generated corresponding c++ constructor:

{{{
using namespace j2cpp;

local_ref<java::lang::String> newString1=java::lang::String();
local_ref<java::lang::String> newString2=java::lang::String(array<jbyte,1>("newString2"));

}}}

== Working with static and member fields ==

The library is designed to have a simple and logical syntax.

Working with static field is as simple as:

{{{
using namespace j2cpp;

void doRender(jobject gl10)
{
    using namespace javax::microedition::khronos::opengles;
    GL10 gl(gl10);
    gl.glEnable(GL10::GL_TEXTURE_2D);
    gl.glBindTexture(texId);
    .
    .
    .
}

}}}

and with member fields:

{{{
using namespace j2cpp;

void Polygon::append(jobject jp)
{
    android::graphics::Point point(jp);
    m_points.push_back(Vertex(point.x,point.y));
}

}}}

= Samples =

Directory {{{ $(PATH_TO_ANDROID_CPP_SDK)/samples }}} contains two working samples of how to use the library:

 * j2cppTest : very first sample;
 * j2cppCameraTest : sample that opens the camera and draws the preview frames using OpenGL ES;